package learning.BDD.utilities

import cucumber.runtime.io.FileResourceLoader
import cucumber.runtime.model.CucumberFeature
import gherkin.ast.*
import net.steppschuh.markdowngenerator.Markdown
import net.steppschuh.markdowngenerator.table.Table
import net.steppschuh.markdowngenerator.table.TableRow
import net.steppschuh.markdowngenerator.text.emphasis.BoldText
import org.apache.commons.io.FileUtils
import org.apache.commons.lang3.StringUtils
import org.testng.annotations.Test

import java.nio.charset.StandardCharsets

class ReadMeUtil {

    List<String> features = new ArrayList<>()
    List<String> scenarios = new ArrayList<>()

    private String SPLITTER = "|"
    private String newLine = "\n\n"
    private int iAutomated=0, iManual=0, iHigh=0, iLow=0, iMedium=0
    private String defaultContent = "Autogenerated by ReadMe Util"

    @Test
    void buildUtil() {
        String sProjectName = "test"
        getAllFeaturesFiles()
        buildReadMeFile(sProjectName, getFeatureElements(features))
        writeTestCaseList(sProjectName)
        println("test")
    }

    void writeTestCaseList(String sname) {
        try {
            Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(sname + ".txt"), StandardCharsets.UTF_8))
            writer.write("Project | TestCase Name | Test Case Path | Test Case Type | \n")
            scenarios.each { sc1 ->
                writer.write( sname + SPLITTER + sc1 + "\n")
            }

        } catch (Exception e) {
            e.printStackTrace()
        }

    }


    /**Method to build the readME file **/
    void buildReadMeFile(String name, List<TableRow> rows) {
        try {
            Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("ReadMe.md"), StandardCharsets.UTF_8))
            writer.write( newLine + buildMarkDownTable(rows) + newLine + defaultContent)
        } catch (Exception e) {                                                                                                                 
            e.printStackTrace()
        }
    }

    Table buildMarkDownTable(List<TableRow> tableRows) {

        Table table = new Table()
        table.useFirstRowAsHeader(true)
        table.setAlignments(Arrays.asList(Table.ALIGN_CENTER, Table.ALIGN_LEFT, Table.ALIGN_LEFT, Table.ALIGN_LEFT,
                                            Table.ALIGN_CENTER, Table.ALIGN_CENTER, Table.ALIGN_CENTER, Table.ALIGN_CENTER, Table.ALIGN_CENTER,
                                            Table.ALIGN_CENTER, Table.ALIGN_CENTER))
        table.setRows(tableRows)
        return table

    }

    //This method will get all the Features absolute File path
    void getAllFeaturesFiles() {
        String[] strarray = ["feature"]
        FileUtils.iterateFiles(
                new File ("src/test/resources/feature"),
                strarray,
                true).forEachRemaining{ file ->
                features.add(file.getCanonicalPath())
        }




    }

    List<TableRow> getFeatureElements(List<String> sFeatures) {
        List<TableRow> trows = new LinkedList<>()

        trows.add(headerRow())
        (CucumberFeature.load(new FileResourceLoader(), sFeatures)).each { file ->

            String sModule="", sSubModule="N/A", sCategory=""
            HashMap<String, Integer> sTags = new HashMap<>()
            String sFeaturePath = "src" + file.getUri().split("src")[1]
            int scenarioCount = 0
            sModule = file.getGherkinFeature().getFeature().getName()
            List<String> sFeatureTags = uniqueList(file.getGherkinFeature().getFeature().getTags())
            sFeatureTags.each { ftag ->
                sModule = (ftag.startsWith("@Module_")) ? ftag.split("@Module_")[1] : sModule
                sSubModule = (ftag.startsWith("@SubModule_")) ? ftag.split("@SubModule_")[1] : sSubModule
            }
            List<ScenarioDefinition> scenarios = file.getGherkinFeature().getFeature().getChildren()
            scenarios.each { gsce ->
                if( gsce instanceof ScenarioOutline) {
                    List<String> lScenarioTags = uniqueList(((ScenarioOutline) gsce).getTags())
                    gsce.getExamples().each { e1 ->
                        List<String> examplesTags = uniqueList(e1.getTags())
                        if(examplesTags.size()> 0) {
                            lScenarioTags = lScenarioTags + examplesTags
                        }
                        scenarioCount += e1.getTableBody().size()
                        sTags += getTagMap(lScenarioTags, e1.getTableBody().size())
                        e1.getTableBody().each { row ->
                            this.scenarios.add(getExampleTCName(row, e1.getTableHeader(), gsce.getName()) + SPLITTER + getExampleLine(sFeaturePath, row) + SPLITTER + isAutomated(lScenarioTags))
                        }
                    }

                } else if (gsce instanceof Scenario) {

                    List<String> sScenarioTags = uniqueList(((Scenario) gsce).getTags())
                    if(sScenarioTags.size()>0) {
                        this.scenarios.add(gsce.getName()+ SPLITTER + getScenarioLine(sFeaturePath, (Scenario) gsce) + SPLITTER + isAutomated(sScenarioTags))
                        sTags += getTagMap(sScenarioTags, 1)
                    }
                    scenarioCount++
                }
                sCategory = sTags.isEmpty() ? sCategory : getCategory(sTags)
            }

            if(scenarioCount > 0) {
                TableRow sData = new TableRow()
                sData.setColumns(Arrays.asList(sCategory, sModule, sSubModule, sFeatureTags.toString().trim(), scenarioCount, iManual, iAutomated, iHigh, iMedium, iLow, "NA"))
                trows.add(sData)
            }

            iManual = 0
            iAutomated = 0
            iHigh = 0
            iLow = 0
            iMedium = 0
        }
        return trows
    }

    //This method will return the category code
    String getCategory(HashMap<String, Integer> sIHashMap) {
        return sIHashMap.get("UI") > 0 ? "UI" :
                    sIHashMap.get("API") > 0 ? "API" :
                            sIHashMap.get("Mobile") > 0 ? "Mobile" : "UI"
    }

    String getExampleTCName(gherkin.ast.TableRow row, gherkin.ast.TableRow Header, String outline) {

        final String OPEN = "<", CLOSE= ">"
        List<TableCell> Headers = Header.getCells()
        String[] findString = StringUtils.substringBetween(outline, OPEN, CLOSE)
        if(findString != null) {
            findString.each { str ->
                int i = 0
                Headers.each { h1 ->
                    if(h1.getValue().equalsIgnoreCase(str)) {
                        outline = outline.replace(OPEN+str+CLOSE, row.getCells().get(i).getValue())
                    }
                    i++
                }
            }
        }


    }

    String getExampleLine(String path, gherkin.ast.TableRow row) {
        return path + ":" + row.getLocation().getLine()
    }

    //Method to return Tag Counts for the feature in map
    HashMap<String, Integer> getTagMap(List<String> ltags, int count) {
        int iAPI = 0, iUI = 0, iMobile = 0
        HashMap<String, Integer> map = new HashMap<>()
        ltags.each { tagValue ->
            switch(tagValue.toLowerCase()){
                case("@automated"):
                    this.iAutomated += count
                    break
                case("@manual"):
                    this.iManual += count
                    break
                case("@high"):
                    this.iHigh += count
                    break
                case("@medium"):
                    this.iMedium += count
                    break
                case("@low"):
                    this.iLow += count
                    break
                case("@api"):
                    iAPI += count
                    break
                case("@ui"):
                    iUI += count
                    break
                case("@mobile"):
                    iMobile += count
                    break
                default:
                    break
            }
        }
        map.put("API", iAPI)
        map.put("UI", iUI)
        map.put("Mobile", iMobile)
        return map
    }

    //Method to return the line number of the scenario
    String getScenarioLine(String featurePath, Scenario scenario) {
        return featurePath + ":" + scenario.getLocation().getLine()
    }

    //This method will check with we have Automated tag in the tag list
    void isAutomated(List<String> val) {
        val.contains("@Automated")
    }
    //Unique List
    List<String> uniqueList(List<String> values) {
        Set<String> hashSetList = new HashSet<String>()
        List<String> newList = new ArrayList<>()
        values.each { Tag val ->
            if(hashSetList.add(val.getName().trim())) {
                newList.add(val.getName().trim())
            }
        }
        return newList
    }

    //This method will add the header to the Read Me file
    TableRow headerRow() {
        TableRow header = new TableRow()
        header.setColumns(Arrays.asList(
                new BoldText("Category"),
                new BoldText("Module"),
                new BoldText("Sub Module"),
                new BoldText("Tag(Mandatory)"),
                new BoldText("Count"),
                new BoldText("Manual"),
                new BoldText("Automated"),
                new BoldText("High"),
                new BoldText("Medium"),
                new BoldText("Low"),
                new BoldText("Comments")
        ))
        return header
    }
}
